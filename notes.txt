Parts to review after finish the course:

1. infinite scrolling
2. ajax
3. $.post() javascript function
4. upload profile image
5. time message

Bugs:
1. notification doesn't set to opened for certain notifications
2. newsfeed only display after going to other tab first

Steps:

SECTION 2
1. create db
2. create connection from index.php to db
3. create form to register.php to register user
   - capture the register form input values
   - sanitize accordingly
   - validate accordingly
4. create users table
5. check if email already in use
6. validate the remaining values
7. store the form input values into session, so the values persist during form error
8. store the error messages into an array, and display if got error in the register form
9. auto create username, append incremented number if username already exist
10. assign default profile picture, random between 2 default pics
11. insert all the finalized values into users table
12. set successfull insert message into error array and then display it after inserting
13. reset form input sessions values

SECTION 3
1. create config.php, put db connection code in there and include it in the register.php
2. move all other php code in register.php to register_handler.php page and include it in the register.php
3. create login form, above registration form, inside register.php page
4. handle login in login_handler.php
   - capture input, check with db, and if yes store in session
   - then redirect to index.php
   - don't forget to include the login handler in the register.php
5. set login error into error_array and display in login form during login error
6. set login email to session to persist the value during login error
7. reopen closed account during login if the account is closed

SECTION 4
1. create register_style.css, and link it in register.php head
2. add background picture to register.php
   - style it to cover the whole page
3. add div around forms in register.php and style it
4. create login_header div for the header and style it
5. download bellota font, save in font folder, create font-face in css and then use it in login, login header and login header h1
6. add text shadow to login header h1
7. style the login/register form
8. create wrapper for each login & registration form, then and jquery cdn, then create js file for registration page
9. add jquery code to toggle login and registration form
10. fix bug when click register button with error, register form is hidden

SECTION 5
1. create header page in includes, put the upper body of html in the page and include header in index page
2. in header get logged in user from session, but if none, redirect to register page
3. add bootstrap into the header page
4. create the top navbar and style it
5. style the top navbar logo
6. add fontawesome into the header page
7. set the icons on the topbar nav
8. add logged in username name in the topbar nav

SECTION 6
1. create div to display profile image
2. style the above 
3. add user details to above panel and style it
4. create the main column and add form for comment and then style it
5. style the add comment button
6. setup htaccess page, then setup profile page, then link name, profile page and topbar user name to profile page
7. setup posts, post_comments and likes tables in db
8. create User.php class in class folder in includes folder
9. create Post.php class in class folder in includes folder
   - create function to submit post
10. fix line break issue in the textarea
11. fix date insert issue when refresh page
12. create logout menu and logout page

SECTION 7
1. create load post friends function in Post.php
   - get post data
   - create time interval message
2. create ajax_load_posts.php
3. add ajax call in index.php

SECTION 8
1. create isFriend function in User.php
2. use the function in Post.php to display only friends posts
3. create comment_frame.php file in the root folder
4. put comment form in the file and insert into table properly
5. use iframe in Post.php to call comment_frame.php
6. load all the comments for the post in the comment_frame.php
7. stylethe iframe
8. add newsfeedPostOption to display the number of comments for each post, and then style it
9. add javascript in post.php to not display the comment_frame when click on link
10. create like.php
    - create like or dislike button
	- handle the button click to update total likes for the post and for the post owner and then insert likes data into likes table
	- insert like.php in iframe in Post.php below newsfeedPostOption
11. style the like unlike button

SECTION 9
1. add left column section in profile page to display user image, likes, posts and friends count and then style it
2. then add button below it based on the relationship status between current user with the profile page owner
3. check if account closed -> divert to user_closed.php page
4. if user view his/her own profile page, no button will be displayed
5. style the button
6. create removeFriend function in User.php
7. create sendRequest function in User.php
8. set up the button handlers using functions from User.php
9. create requests.php page to handler friend requests
   - add or ignore friend request, and update table accordingly
10. style requests.php page
11. create delete post button for every post that doesn't belong to logged in user
12. place the delete post button after time message
13. add javascript code to handle the delete button click
    - use bootbox.js
	- send the action to delete_post.php
14. create delete_post.php page to handle post deletion
15. style the delete button
16. create upload.php page, copy paste code provided by reece, update the code accordingly

SECTION 10
1. create Message.php class and messages.php page
2. create getMostRecentUser in Message.php
3. create message table in db
4. create user details column to display some info of the profile user
5. create sendMessage function in Message.php
6. create getLatestMessage function in Message.php
7. create getConversations function in Message.php
8. create the main column section in messages.php
   - create the top part to display all the messages in a conversation
   - create message_post div
     - top part is the user search form to search user to start a conversation
	 - create a getUser function in facebook.js to handle the user search through ajax call
	 - create ajax_friend_search.php file to handle the user search from the javascript ajax call
     - at the bottom is the message form to submit new message
9. create another user details column to display the list of all the conversation the logged in user has
10. in profile.php page, in the main column, use bootstrap nav tab component to create tab for newsfeed, about and messages
11. in tab_content div below it, place all 3 component content and link it to above nav tab
12. style everything

SECTION 11
1. setup up the header.php file for the dropdown menu
2. create the javascript function getDropdownData
3. create ajax_load_messages.php file
4. create getConvosDropdown function Message.php, copy from getConversations function and modify it
5. complete the return string of the above function
6. style the dropdown
7. infinite scrolling
   - copy infinite scrolling script from index.php and paste in header.php 
   - modify the script to suit the dropdown menu
8. create getUnreadNumber function in Message.php to get the number of unread messages
9. get the unread messages number and display it in header file in the message menu
10. style the above notification badge

SECTION 12
1. create notifications table
2. add notification badge to the navigation bar
3. complete the notification part in getDropdownData function in facebook.js 
4. create insertNotification function in Notification.php file
5. call the insertNotification function in submit post function in Post.php every time a post is submitted to other user
6. call the insertNotification function in like.php page
7. call the insertNotification function in comment_frame.php
8. final part, send notification to all commenters
9. create getNotifications function in Notification.php, copy from Message.php and then modify it
10. create post.php page
	- include header.php, get the sent id, then copy the user_details_column from index and paste it
	- create the main column 
11. create getSinglePost function in Post.php
    - copy from loadPostFriends function and modify it
12. create sql script in getSinglePost function to update notification as opened when user click
13. create function to get the number of friend request in User.php
14. use the above functioon to add friend request notification badge in the header page

SECTION 13
1. create a form for the search field in the header
2. style the form
3. create javascript function to animate the search field when receive focus and submit the form when click on the magnifying glass image
4. create getLiveSearchUsers function in function.js
5. create ajax_search.php file
6. create the userReturnedQuery based on the search input sent to the ajax file
7. loop the result of the above query to create the structure of the search result
8. style the above dropdown results
9. add javascript function to close dropdown for search bar, notifications and messages when user clicks away

SECTION 14
1. create search.php page in the root folder
2. include header
3. set if condition at the top to check of type and query input
4. create main column
5. based on query & type, set the usersReturnedQuery to search for users
6. create while loop to loop through the result and create the structure of the results to display
7. style the results structure
8. finally add the functionality to all the buttons
